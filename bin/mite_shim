#!/usr/bin/perl -w

use strict;
use warnings;

use File::Spec;


=head1 NAME

mite_shim - Produce a stand alone Mite module for your project

=head1 SYNOPSIS

    # On the command line
    mite_shim <shim package name> > lib/My/Mite.pm

    # And then in your code
    package My::Class
    use My::Mite;

=head1 DESCRIPTION

In order to be able to run without having L<Mite> installed, your
project needs a "shim" module to load the compiled Mite code and
provide dummy versions of C<has> and the like.

This generates that shim.

It changes the package name to fit your project, so multiple versions
of the shim can be loaded at the same time.

=head1 SEE ALSO

L<Mite>

=cut

# This makes it so we can load it with require() and test main()
print main(@ARGV) unless caller;

sub main {
    my $shim_package = shift;
    die "mite_shim <shim_package_name>\n" unless $shim_package;

    # Find the Mite file
    my $shim_file = _find_mite_shim_pm();

    # Add our shim class as a subclass
    my $out .= <<"OUT";
{
    package $shim_package;
    BEGIN { our \@ISA = qw(Mite); }
}

OUT

    # Append Mite.pm
    open my $in, "<", $shim_file or die "Can't open $shim_file for reading: $!";
    while(my $line = <$in>) {
        $out .= $line;
    }

    return $out;
}


sub _find_mite_shim_pm {
    for my $dir (@INC) {
        # Avoid code refs in @INC
        next if ref $dir;

        my $shim = File::Spec->catfile($dir, "Mite.pm");
        return $shim if -e $shim;
    }

    die "Could not find Mite.pm";
}
